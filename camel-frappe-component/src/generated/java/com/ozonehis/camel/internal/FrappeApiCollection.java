/*
 * Camel ApiCollection generated by camel-api-component-maven-plugin
 */
package com.ozonehis.camel.internal;

import java.util.Arrays;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ozonehis.camel.FrappeConfiguration;
import com.ozonehis.camel.FrappeGetEndpointConfiguration;
import com.ozonehis.camel.FrappePostEndpointConfiguration;
import com.ozonehis.camel.FrappePutEndpointConfiguration;
import com.ozonehis.camel.FrappeDeleteEndpointConfiguration;

import org.apache.camel.support.component.ApiCollection;
import org.apache.camel.support.component.ApiMethod;
import org.apache.camel.support.component.ApiMethodHelper;

/**
 * Camel {@link ApiCollection} for Frappe
 */
public final class FrappeApiCollection extends ApiCollection<FrappeApiName, FrappeConfiguration> {

    private static FrappeApiCollection collection;

    private FrappeApiCollection() {
        final Map<String, String> aliases = new HashMap<>();
        final Map<FrappeApiName, ApiMethodHelper<? extends ApiMethod>> apiHelpers = new EnumMap<>(FrappeApiName.class);
        final Map<Class<? extends ApiMethod>, FrappeApiName> apiMethods = new HashMap<>();

        List<String> nullableArgs;

        aliases.clear();
        nullableArgs = Arrays.asList("fields", "filters", "queryParams");
        apiHelpers.put(FrappeApiName.GET, new ApiMethodHelper<>(FrappeGetApiMethod.class, aliases, nullableArgs));
        apiMethods.put(FrappeGetApiMethod.class, FrappeApiName.GET);

        aliases.clear();
        nullableArgs = Arrays.asList("queryParams");
        apiHelpers.put(FrappeApiName.POST, new ApiMethodHelper<>(FrappePostApiMethod.class, aliases, nullableArgs));
        apiMethods.put(FrappePostApiMethod.class, FrappeApiName.POST);

        aliases.clear();
        nullableArgs = Arrays.asList("queryParams");
        apiHelpers.put(FrappeApiName.PUT, new ApiMethodHelper<>(FrappePutApiMethod.class, aliases, nullableArgs));
        apiMethods.put(FrappePutApiMethod.class, FrappeApiName.PUT);

        aliases.clear();
        nullableArgs = Arrays.asList();
        apiHelpers.put(FrappeApiName.DELETE, new ApiMethodHelper<>(FrappeDeleteApiMethod.class, aliases, nullableArgs));
        apiMethods.put(FrappeDeleteApiMethod.class, FrappeApiName.DELETE);

        setApiHelpers(apiHelpers);
        setApiMethods(apiMethods);
    }

    public FrappeConfiguration getEndpointConfiguration(FrappeApiName apiName) {
        FrappeConfiguration result = null;
        switch (apiName) {
            case GET:
                result = new FrappeGetEndpointConfiguration();
                break;
            case POST:
                result = new FrappePostEndpointConfiguration();
                break;
            case PUT:
                result = new FrappePutEndpointConfiguration();
                break;
            case DELETE:
                result = new FrappeDeleteEndpointConfiguration();
                break;
        }
        return result;
    }

    public static synchronized FrappeApiCollection getCollection() {
        if (collection == null) {
            collection = new FrappeApiCollection();
        }
        return collection;
    }
}
